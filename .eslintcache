[{"/home/tu/Desktop/dragdropreact/src/index.js":"1","/home/tu/Desktop/dragdropreact/src/App.js":"2","/home/tu/Desktop/dragdropreact/src/reportWebVitals.js":"3","/home/tu/Desktop/dragdropreact/src/DropTarget1.js":"4","/home/tu/Desktop/dragdropreact/src/DropTarget2.js":"5","/home/tu/Desktop/dragdropreact/src/Droppable.js":"6"},{"size":458,"mtime":1607141481554,"results":"7","hashOfConfig":"8"},{"size":1992,"mtime":1607403959158,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":1606980669365,"results":"10","hashOfConfig":"8"},{"size":4403,"mtime":1607403952474,"results":"11","hashOfConfig":"8"},{"size":4312,"mtime":1607403956278,"results":"12","hashOfConfig":"8"},{"size":3965,"mtime":1607407565531,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"y6oe6v",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"24"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"24"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/tu/Desktop/dragdropreact/src/index.js",[],["30","31"],"/home/tu/Desktop/dragdropreact/src/App.js",[],"/home/tu/Desktop/dragdropreact/src/reportWebVitals.js",[],"/home/tu/Desktop/dragdropreact/src/DropTarget1.js",["32"],"import React, { useContext, useRef, useState } from 'react';\nimport { DropContext } from './App';\nimport \"./style.css\";\n\n\nfunction DropTarget1(props) {\n\n    const [state, setState] = useState({\n        data: [\n            {\n                id: 4,\n                title: '1a'\n            },\n            {\n                id: 5,\n                title: '1b'\n            },\n            {\n                id: 6,\n                title: '1c'\n            }\n        ],\n        dataReceive: [],\n        indexReplace: [],\n        indexStart: []\n    });\n\n    const dropElementRef = useRef();\n\n    const [dropState, { startTransaction, endTransaction }] = useContext(DropContext);\n\n    const dragStart = (event, index) => {\n        event.dataTransfer.setData('textA', JSON.stringify(state.data[index]));\n\n        startTransaction(state.data[index], ({ payload, transactionPayload }) => {\n            const { target } = payload;\n            console.log(!dropElementRef.current.contains(target));\n            if (!dropElementRef.current.contains(target)) {\n                console.log('ben ngoaii=====================');\n                console.log('payload: ', payload, 'transactionPayload', transactionPayload);\n                const indexDelete = state.data.findIndex(item => item.id === transactionPayload.id);\n                setState(prevState => {\n                    prevState.data.splice(indexDelete, 1);\n                    return { ...prevState }\n                })\n            }\n            else {\n                setState(prevState => {\n                    prevState.indexStart = index;\n                    return { ...prevState }\n                })\n                setState(prevState => {\n                    console.log(\"O tronggggggggg\");\n                    console.log(\"indexReplace: \", prevState.indexReplace);\n                    const nextItems = [...prevState.data];\n                    const temp = nextItems[prevState.indexStart];\n                    nextItems[prevState.indexStart] = nextItems[prevState.indexReplace];\n                    nextItems[prevState.indexReplace] = temp;\n                    return { ...prevState, data: [...nextItems] };\n                })\n            }\n        });\n\n\n    }\n\n    const allowDropFunc = (event) => {\n        event.preventDefault();\n    }\n\n    const onDropFunc = (event) => {\n        event.preventDefault();\n        endTransaction({ target: event.target });\n\n        if (event.dataTransfer.getData('textB')) {\n            var data = JSON.parse(event.dataTransfer.getData('textB'));\n\n            setState(prevState => {\n                prevState.dataReceive = data;\n                return { ...prevState }\n            });\n\n            setState(prevState => {\n                prevState.data.splice(prevState.indexReplace, 0, data);\n                return { ...prevState };\n            })\n        }\n\n    }\n\n    const dragEnd = (event, index) => {\n        // setState(prevState => {\n        //     const nextItems = [...prevState.data];\n        //     const temp = nextItems[prevState.indexStart];\n        //     nextItems[prevState.indexStart] = nextItems[prevState.indexReplace];\n        //     nextItems[prevState.indexReplace] = temp;\n        //     // setTimeout(() => {\n        //     //     console.log(nextItems[prevState.indexReplace]);\n        //     // }, 1000);\n        //     return { ...prevState, data: [...nextItems] };\n        // })\n    }\n\n    const drag = (event) => {\n\n    }\n\n    /////////////\n    const dragOver = (event, index) => {\n        event.preventDefault();\n        const data = index;\n        setState(prevState => ({\n            ...prevState,\n            indexReplace: data\n        }))\n    }\n\n    return (\n        <div ref={dropElementRef}>\n            <h2>Column 1</h2>\n            <div className='dropTarget' onDragOver={allowDropFunc} onDrop={onDropFunc}>\n                {state.data.map((item, index) => (\n                    <p\n                        key={index}\n                        onDragOver={(event) => dragOver(event, index)}\n                        draggable='true'\n                        onDragStart={(event) => dragStart(event, index)}\n                        onDragEnd={(event) => dragEnd(event, index)}\n                        onDrag={drag}\n                    >\n                        {item.title}\n                    </p>\n                ))}\n            </div>\n        </div>\n    );\n}\n\nexport default DropTarget1;",["33","34"],"/home/tu/Desktop/dragdropreact/src/DropTarget2.js",["35"],"import React, { useContext, useRef, useState } from 'react';\nimport { DropContext } from './App';\nimport \"./style.css\";\nDropTarget2.propTypes = {\n\n};\n\nfunction DropTarget2(props) {\n\n    const [state, setState] = useState({\n        data: [\n            {\n                id: 1,\n                title: '2a'\n            },\n            {\n                id: 2,\n                title: '2b'\n            },\n            {\n                id: 3,\n                title: '2c'\n            }\n        ],\n        signalReceived: [],\n        dataReceive: [],\n        indexReplace: [],\n        indexStart: [],\n        indexEnd: [],\n    });\n\n    const dropElementRef = useRef();\n\n    const [dropState, { startTransaction, endTransaction }] = useContext(DropContext);\n\n\n    const allowDropFunc = (event) => {\n        event.preventDefault();\n    }\n\n    const onDropFunc = (event) => {\n        event.preventDefault();\n        endTransaction({ target: event.target });\n        if (event.dataTransfer.getData('textA')) {\n            var data = JSON.parse(event.dataTransfer.getData('textA'));\n\n            setState(prevState => {\n                prevState.signalReceived = true;\n                return { ...prevState }\n            });\n\n            setState(prevState => {\n                prevState.dataReceive = data;\n                return { ...prevState }\n            });\n\n            setState(prevState => {\n                prevState.data.splice(prevState.indexReplace, 0, data);\n                return { ...prevState };\n            });\n\n            setState(prevState => {\n                prevState.signalReceived = false;\n                return { ...prevState }\n            });\n        }\n\n        else {\n            console.log('khong co data truyen tu target 1');\n        }\n    }\n\n    const dragStart = (event, index) => {\n        event.dataTransfer.setData('textB', JSON.stringify(state.data[index]));\n\n        startTransaction(state.data[index], ({ payload, transactionPayload }) => {\n            if (!dropElementRef.current.contains(payload.target)) {\n                console.log('ben ngoaii=====================');\n                const { target } = payload;\n                console.log('dropElementRef: ', dropElementRef);\n                console.log('target: ', target.parentNode, 'transactionPayload', transactionPayload);\n                setTimeout(() => {\n                    console.log(dropElementRef.current === target.parentNode);\n                }, 1000);\n                const indexDelete = state.data.findIndex(item => item.id === transactionPayload.id);\n                setState(prevState => {\n                    prevState.data.splice(indexDelete, 1);\n                    return { ...prevState }\n                })\n            }\n        });\n\n        setState(prevState => {\n            prevState.indexStart = index;\n            return { ...prevState }\n        })\n    }\n\n\n    const dragEnd = (event, index) => {\n        setState(prevState => {\n            const nextItems = [...prevState.data];\n            const temp = nextItems[prevState.indexStart];\n            nextItems[prevState.indexStart] = nextItems[prevState.indexReplace];\n            nextItems[prevState.indexReplace] = temp;\n\n            return { ...prevState, data: [...nextItems] };\n        })\n    }\n\n    const dragOver = (event, index) => {\n        console.log('index drag over target 2: ', index);\n        setState(prevState => {\n            prevState.indexReplace = index;\n            return { ...prevState };\n        })\n    }\n\n    const drag = (event) => {\n\n    }\n\n    console.log('ref: ', dropElementRef);\n\n    return (\n        <div ref={dropElementRef}>\n            <h2>Column 2</h2>\n            <div className='dropTarget' onDragOver={allowDropFunc} onDrop={onDropFunc}>\n                {state.data.map((item, index) => (\n                    <p\n                        key={item.id}\n                        draggable='true'\n                        onDragOver={(event) => dragOver(event, index)}\n                        onDragStart={(event) => dragStart(event, index)}\n                        onDragEnd={(event) => dragEnd(event, index)}\n                        onDrag={drag}\n                    >\n                        {item.title}\n                    </p>\n                ))}\n            </div>\n        </div>\n    );\n}\n\nexport default DropTarget2;","/home/tu/Desktop/dragdropreact/src/Droppable.js",[],{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","severity":1,"message":"41","line":30,"column":12,"nodeType":"42","messageId":"43","endLine":30,"endColumn":21},{"ruleId":"36","replacedBy":"44"},{"ruleId":"38","replacedBy":"45"},{"ruleId":"40","severity":1,"message":"41","line":34,"column":12,"nodeType":"42","messageId":"43","endLine":34,"endColumn":21},"no-native-reassign",["46"],"no-negated-in-lhs",["47"],"no-unused-vars","'dropState' is assigned a value but never used.","Identifier","unusedVar",["46"],["47"],"no-global-assign","no-unsafe-negation"]